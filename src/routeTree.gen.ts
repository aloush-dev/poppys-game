/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PlayImport } from './routes/play'
import { Route as LoginImport } from './routes/login'
import { Route as ExploreImport } from './routes/explore'
import { Route as CreateImport } from './routes/create'
import { Route as IndexImport } from './routes/index'
import { Route as ProfileIndexImport } from './routes/profile/index'
import { Route as UserUsernameImport } from './routes/user/$username'
import { Route as ProfileSavedLevelsImport } from './routes/profile/saved-levels'
import { Route as ProfilePublishedLevelsImport } from './routes/profile/published-levels'

// Create/Update Routes

const PlayRoute = PlayImport.update({
  id: '/play',
  path: '/play',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ExploreRoute = ExploreImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => rootRoute,
} as any)

const CreateRoute = CreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileIndexRoute = ProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any)

const UserUsernameRoute = UserUsernameImport.update({
  id: '/user/$username',
  path: '/user/$username',
  getParentRoute: () => rootRoute,
} as any)

const ProfileSavedLevelsRoute = ProfileSavedLevelsImport.update({
  id: '/profile/saved-levels',
  path: '/profile/saved-levels',
  getParentRoute: () => rootRoute,
} as any)

const ProfilePublishedLevelsRoute = ProfilePublishedLevelsImport.update({
  id: '/profile/published-levels',
  path: '/profile/published-levels',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateImport
      parentRoute: typeof rootRoute
    }
    '/explore': {
      id: '/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/play': {
      id: '/play'
      path: '/play'
      fullPath: '/play'
      preLoaderRoute: typeof PlayImport
      parentRoute: typeof rootRoute
    }
    '/profile/published-levels': {
      id: '/profile/published-levels'
      path: '/profile/published-levels'
      fullPath: '/profile/published-levels'
      preLoaderRoute: typeof ProfilePublishedLevelsImport
      parentRoute: typeof rootRoute
    }
    '/profile/saved-levels': {
      id: '/profile/saved-levels'
      path: '/profile/saved-levels'
      fullPath: '/profile/saved-levels'
      preLoaderRoute: typeof ProfileSavedLevelsImport
      parentRoute: typeof rootRoute
    }
    '/user/$username': {
      id: '/user/$username'
      path: '/user/$username'
      fullPath: '/user/$username'
      preLoaderRoute: typeof UserUsernameImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/explore': typeof ExploreRoute
  '/login': typeof LoginRoute
  '/play': typeof PlayRoute
  '/profile/published-levels': typeof ProfilePublishedLevelsRoute
  '/profile/saved-levels': typeof ProfileSavedLevelsRoute
  '/user/$username': typeof UserUsernameRoute
  '/profile': typeof ProfileIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/explore': typeof ExploreRoute
  '/login': typeof LoginRoute
  '/play': typeof PlayRoute
  '/profile/published-levels': typeof ProfilePublishedLevelsRoute
  '/profile/saved-levels': typeof ProfileSavedLevelsRoute
  '/user/$username': typeof UserUsernameRoute
  '/profile': typeof ProfileIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/explore': typeof ExploreRoute
  '/login': typeof LoginRoute
  '/play': typeof PlayRoute
  '/profile/published-levels': typeof ProfilePublishedLevelsRoute
  '/profile/saved-levels': typeof ProfileSavedLevelsRoute
  '/user/$username': typeof UserUsernameRoute
  '/profile/': typeof ProfileIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create'
    | '/explore'
    | '/login'
    | '/play'
    | '/profile/published-levels'
    | '/profile/saved-levels'
    | '/user/$username'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create'
    | '/explore'
    | '/login'
    | '/play'
    | '/profile/published-levels'
    | '/profile/saved-levels'
    | '/user/$username'
    | '/profile'
  id:
    | '__root__'
    | '/'
    | '/create'
    | '/explore'
    | '/login'
    | '/play'
    | '/profile/published-levels'
    | '/profile/saved-levels'
    | '/user/$username'
    | '/profile/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateRoute: typeof CreateRoute
  ExploreRoute: typeof ExploreRoute
  LoginRoute: typeof LoginRoute
  PlayRoute: typeof PlayRoute
  ProfilePublishedLevelsRoute: typeof ProfilePublishedLevelsRoute
  ProfileSavedLevelsRoute: typeof ProfileSavedLevelsRoute
  UserUsernameRoute: typeof UserUsernameRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateRoute: CreateRoute,
  ExploreRoute: ExploreRoute,
  LoginRoute: LoginRoute,
  PlayRoute: PlayRoute,
  ProfilePublishedLevelsRoute: ProfilePublishedLevelsRoute,
  ProfileSavedLevelsRoute: ProfileSavedLevelsRoute,
  UserUsernameRoute: UserUsernameRoute,
  ProfileIndexRoute: ProfileIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/create",
        "/explore",
        "/login",
        "/play",
        "/profile/published-levels",
        "/profile/saved-levels",
        "/user/$username",
        "/profile/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/create": {
      "filePath": "create.tsx"
    },
    "/explore": {
      "filePath": "explore.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/play": {
      "filePath": "play.tsx"
    },
    "/profile/published-levels": {
      "filePath": "profile/published-levels.tsx"
    },
    "/profile/saved-levels": {
      "filePath": "profile/saved-levels.tsx"
    },
    "/user/$username": {
      "filePath": "user/$username.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
